syntax = "proto3";

import "distributedsyncsession.proto";

// Internal message representing an rpc call
message RpcCall {
  string method = 1;
  bytes data = 2;
}

service RpcService {
  rpc Capabilities (CapabilitiesRequest) returns (CapabilitiesResponse);
  rpc RegisterSession (RegisterSessionRequest) returns (RegisterSessionResponse);
  rpc ClearSession (ClearSessionRequest) returns (ClearSessionResponse);
  rpc SyncStatus (SyncStatusRequest) returns (SyncStatusResponse);
  rpc StartSync (StartSyncRequest) returns (StartSyncResponse);
  rpc SyncReveal (SyncRevealRequest) returns (SyncRevealResponse);
  rpc SyncResponse (SyncResponseRequest) returns (SyncResponseResponse);
  rpc SyncFinalize (SyncFinalizeRequest) returns (SyncFinalizeResponse);
}

message CapabilitiesRequest {
}

message CapabilitiesResponse {
  int32 app_version_major = 1;
  int32 app_version_minor = 2;
  int32 app_version_patch = 3;
  repeated int32 supported_protocol_versions = 4;
}

message RegisterSessionRequest {
  bytes session_id = 1;
}

message RegisterSessionResponse {
  bool existing = 1;
}

message ClearSessionRequest {
  bytes session_id = 1;
}

message ClearSessionResponse {
  bool existing = 1;
}

message SyncStatusRequest {
  bytes session_id = 1;
}

message SyncStatusResponse {
  enum SyncState {
    NONE = 0;
    STARTED = 1;
    REVEALED = 2;
    RESPONDED = 3;
    FINALIZED = 4;
  }
  message SyncStatus {
    string currency_id = 1;
    SyncState state = 2;
  }
  repeated SyncStatus statuses = 1;
}

message StartSyncRequest {
  bytes session_id = 1;
  string currency_id = 2;
  EcdsaInitialCommitment initialCommitment = 3;
}

message StartSyncResponse {
  EcdsaInitialData initialData = 1;
}

message SyncRevealRequest {
  bytes session_id = 1;
  string currency_id = 2;
  EcdsaInitialDecommitment initialDecommitment = 3;
}

message SyncRevealResponse {
  EcdsaChallengeCommitment challengeCommitment = 1;
}

message SyncResponseRequest {
  bytes session_id = 1;
  string currency_id = 2;
  EcdsaResponseCommitment responseCommitment = 3;
}

message SyncResponseResponse {
  EcdsaChallengeDecommitment challengeDecommitment = 1;
}

message SyncFinalizeRequest {
  bytes session_id = 1;
  string currency_id = 2;
  EcdsaResponseDecommitment responseDecommitment = 3;
}

message SyncFinalizeResponse {
}