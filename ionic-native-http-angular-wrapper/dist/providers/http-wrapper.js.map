{"version":3,"sources":["../../src/providers/http-wrapper.ts"],"names":[],"mappings":"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","file":"http-wrapper.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HTTP as nativeHttp} from '@ionic-native/http';\nimport {Headers, Http as angularHttp, RequestMethod, RequestOptionsArgs} from \"@angular/http\";\nimport {checkAvailability} from '@ionic-native/core';\nimport {Observable} from \"rxjs/Observable\";\nimport \"rxjs\";\n\n\nexport class HttpWrapper {\n    protected nativeIsAvailable: boolean | null = null;\n\n    public nativeHttp: nativeHttp | any = false;\n    public angularHttp: angularHttp | any = false;\n\n    public forceAngular: boolean = false;\n\n    constructor(private native: nativeHttp, private angular: angularHttp) {\n        this.nativeHttp = native;\n        this.angularHttp = angular;\n    }\n\n    public isNativeHttpAvailable() {\n        if (this.nativeIsAvailable === null) {\n            this.nativeIsAvailable = checkAvailability('cordova.plugin.http') === true || checkAvailability('cordovaHTTP') === true;\n        }\n        return this.nativeIsAvailable;\n    }\n\n    public get(url: string, options?: RequestOptionsArgs): Observable<any> {\n        options.method = RequestMethod.Get;\n        return this.request(url, options);\n    }\n\n    public post(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n        options.method = RequestMethod.Post;\n        return this.request(url, options, body);\n    }\n\n    public put(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n        options.method = RequestMethod.Put;\n        return this.request(url, options, body);\n    }\n\n    public delete(url: string, options?: RequestOptionsArgs): Observable<any> {\n        options.method = RequestMethod.Delete;\n        return this.request(url, options);\n    }\n\n    public request(url: string, options: RequestOptionsArgs, data?: Object): Observable<any> {\n        if (this.isNativeHttpAvailable() && !this.forceAngular) {\n            let headers: Headers | {} | null = options.headers;\n            if (headers instanceof Headers) {\n                let newHeaders: any = {};\n                headers.forEach(function (value, name) {\n                    newHeaders[name.toString()] = value.toString();\n                });\n                headers = newHeaders;\n            }\n            switch (options.method) {\n                case RequestMethod.Get:\n                    if (data == null) {\n                        data = options.params;\n                    }\n                    return Observable.fromPromise(this.nativeHttp.get(url, data, headers)).map((res: any) => {\n                        return {\n                            json() {\n                                return JSON.parse(res.data);\n                            },\n                            text(ignoredEncodingHint) {\n                                return res.data.toString();\n                            },\n                            data: res.data,\n                            headers: new Headers(res.headers)\n                        }\n                    });\n                case RequestMethod.Post:\n                    if (data == null) {\n                        data = options.body != null ? options.body : {};\n                    }\n                    return Observable.fromPromise(this.nativeHttp.post(url, data, headers)).map((res: any) => {\n                        return {\n                            json() {\n                                return JSON.parse(res.data);\n                            },\n                            text(ignoredEncodingHint) {\n                                return res.data.toString();\n                            },\n                            data: res.data,\n                            headers: new Headers(res.headers)\n                        }\n                    });\n                case RequestMethod.Put:\n                    if (data == null) {\n                        data = options.body != null ? options.body : {};\n                    }\n                    return Observable.fromPromise(this.nativeHttp.put(url, data, headers)).map((res: any) => {\n                        return {\n                            json() {\n                                return JSON.parse(res.data);\n                            },\n                            text(ignoredEncodingHint) {\n                                return res.data.toString();\n                            },\n                            data: res.data,\n                            headers: new Headers(res.headers)\n                        }\n                    });\n                case RequestMethod.Delete:\n                    if (data == null) {\n                        data = options.body != null ? options.body : {};\n                    }\n                    console.log('deleting with data:',data);\n                    return Observable.fromPromise(this.nativeHttp.delete(url, data, headers)).map((res: any) => {\n                        return {\n                            json() {\n                                return JSON.parse(res.data);\n                            },\n                            text(ignoredEncodingHint) {\n                                return res.data.toString();\n                            },\n                            data: res.data,\n                            headers: new Headers(res.headers)\n                        }\n                    });\n                default:\n                    throw 'Request Method not found';\n            }\n        } else {\n            //Make an @angular/http request\n            if (options.headers === undefined) {\n                options.headers = new Headers();\n            }\n            if (data) {\n                options.body = JSON.stringify(data);\n            }\n            return this.angularHttp.request(url, options);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: nativeHttp, },\n{type: angularHttp, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}